
MASTER_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000135f  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d1  00000000  00000000  000019a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af4  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a4  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000075d  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  64:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
			break;
  9c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
			break;
  b4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
			break;
  cc:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
			break;
  e4:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
			break;
 10a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
			break;
 120:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
			break;
 136:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 14e:	44 23       	and	r20, r20
 150:	19 f0       	breq	.+6      	; 0x158 <DIO_SetPin_State+0xa>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	c9 f1       	breq	.+114    	; 0x1c8 <DIO_SetPin_State+0x7a>
 156:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_SetPin_State+0x32>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPin_State+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_SetPin_State+0x4a>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_SetPin_State+0x62>
 166:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPin_State+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPin_State+0x22>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8b bb       	out	0x1b, r24	; 27
			break;
 17e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 180:	28 b3       	in	r18, 0x18	; 24
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPin_State+0x3e>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPin_State+0x3a>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	88 bb       	out	0x18, r24	; 24
			break;
 196:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 198:	25 b3       	in	r18, 0x15	; 21
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPin_State+0x56>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPin_State+0x52>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
			break;
 1ae:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPin_State+0x6e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPin_State+0x6a>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
			break;
 1c6:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	89 f0       	breq	.+34     	; 0x1ee <DIO_SetPin_State+0xa0>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <DIO_SetPin_State+0x8a>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	c9 f0       	breq	.+50     	; 0x204 <DIO_SetPin_State+0xb6>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	11 f1       	breq	.+68     	; 0x21a <DIO_SetPin_State+0xcc>
 1d6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPin_State+0x96>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPin_State+0x92>
 1e8:	82 2b       	or	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
			break;
 1ec:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_State+0xac>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_State+0xa8>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
			break;
 202:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 204:	25 b3       	in	r18, 0x15	; 21
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_State+0xc2>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_State+0xbe>
 214:	82 2b       	or	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
			break;
 218:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 21a:	22 b3       	in	r18, 0x12	; 18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_State+0xd8>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_State+0xd4>
 22a:	82 2b       	or	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	9c 2f       	mov	r25, r28
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_WRITE_CMD+0x3c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_WRITE_CMD+0x42>
 272:	00 00       	nop
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 27e:	20 e1       	ldi	r18, 0x10	; 16
 280:	c2 9f       	mul	r28, r18
 282:	c0 01       	movw	r24, r0
 284:	11 24       	eor	r1, r1
 286:	9b b3       	in	r25, 0x1b	; 27
 288:	9f 70       	andi	r25, 0x0F	; 15
 28a:	89 2b       	or	r24, r25
 28c:	8b bb       	out	0x1b, r24	; 27
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	63 e0       	ldi	r22, 0x03	; 3
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_WRITE_CMD+0x6c>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_WRITE_CMD+0x72>
 2a2:	00 00       	nop
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e1       	ldi	r25, 0x1F	; 31
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_WRITE_CMD+0x82>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_WRITE_CMD+0x88>
 2b8:	00 00       	nop
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <LCD_Init>:
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	66 e0       	ldi	r22, 0x06	; 6
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	67 e0       	ldi	r22, 0x07	; 7
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	81 ee       	ldi	r24, 0xE1	; 225
 308:	94 e0       	ldi	r25, 0x04	; 4
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <LCD_Init+0x4c>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Init+0x56>
 314:	00 00       	nop
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 340:	08 95       	ret

00000342 <LCD_WRITE_DTA>:
 342:	cf 93       	push	r28
 344:	c8 2f       	mov	r28, r24
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 364:	8b b3       	in	r24, 0x1b	; 27
 366:	9c 2f       	mov	r25, r28
 368:	90 7f       	andi	r25, 0xF0	; 240
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	89 2b       	or	r24, r25
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_WRITE_DTA+0x3c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_WRITE_DTA+0x42>
 384:	00 00       	nop
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 390:	20 e1       	ldi	r18, 0x10	; 16
 392:	c2 9f       	mul	r28, r18
 394:	c0 01       	movw	r24, r0
 396:	11 24       	eor	r1, r1
 398:	9b b3       	in	r25, 0x1b	; 27
 39a:	9f 70       	andi	r25, 0x0F	; 15
 39c:	89 2b       	or	r24, r25
 39e:	8b bb       	out	0x1b, r24	; 27
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	63 e0       	ldi	r22, 0x03	; 3
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3aa:	8f e9       	ldi	r24, 0x9F	; 159
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_WRITE_DTA+0x6c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_WRITE_DTA+0x72>
 3b4:	00 00       	nop
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3c0:	8f e3       	ldi	r24, 0x3F	; 63
 3c2:	9f e1       	ldi	r25, 0x1F	; 31
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_WRITE_DTA+0x82>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_WRITE_DTA+0x88>
 3ca:	00 00       	nop
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WRITE_CMD>
 3d6:	08 95       	ret

000003d8 <main>:
#include "LCD.h"

int main(void)
{
	uint8_t DATA = 0;
	SPI_MASTER_Initialize();
 3d8:	0e 94 06 02 	call	0x40c	; 0x40c <SPI_MASTER_Initialize>
	UART_Init();
 3dc:	0e 94 1f 02 	call	0x43e	; 0x43e <UART_Init>
	LCD_Init();
 3e0:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Init>
	LCD_CLEAR();
 3e4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_CLEAR>

	while (1)
	{
		DATA = UART_Receive();
 3e8:	0e 94 27 02 	call	0x44e	; 0x44e <UART_Receive>
 3ec:	c8 2f       	mov	r28, r24
		LCD_WRITE_DTA(DATA);
 3ee:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_WRITE_DTA>
		
		MASTER_Transmit(DATA);
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 1b 02 	call	0x436	; 0x436 <MASTER_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	84 e3       	ldi	r24, 0x34	; 52
 3fc:	9c e0       	ldi	r25, 0x0C	; 12
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x26>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	ee cf       	rjmp	.-36     	; 0x3e8 <main+0x10>

0000040c <SPI_MASTER_Initialize>:
 */ 
#include "SPI.h"

void SPI_MASTER_Initialize(void){

	CLR_BIT(SPSR,SPI12X); //SPEED SELECTOR : Fosc/128
 40c:	8e b1       	in	r24, 0x0e	; 14
 40e:	8e 7f       	andi	r24, 0xFE	; 254
 410:	8e b9       	out	0x0e, r24	; 14
	
	SET_BIT(DDRB,SS);   /*Define direction as output*/
 412:	87 b3       	in	r24, 0x17	; 23
 414:	80 61       	ori	r24, 0x10	; 16
 416:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,MOSI);	/*Define direction as input*/
 418:	87 b3       	in	r24, 0x17	; 23
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB,MISO);	/*Define direction as output*/
 41e:	87 b3       	in	r24, 0x17	; 23
 420:	8f 7b       	andi	r24, 0xBF	; 191
 422:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,SCK);	/*Define direction as output*/
 424:	87 b3       	in	r24, 0x17	; 23
 426:	80 68       	ori	r24, 0x80	; 128
 428:	87 bb       	out	0x17, r24	; 23
	
	SPCR = 0x53;//0b 0101 0011
 42a:	83 e5       	ldi	r24, 0x53	; 83
 42c:	8d b9       	out	0x0d, r24	; 13
	CLR_BIT(PORTB,SS);
 42e:	88 b3       	in	r24, 0x18	; 24
 430:	8f 7e       	andi	r24, 0xEF	; 239
 432:	88 bb       	out	0x18, r24	; 24
 434:	08 95       	ret

00000436 <MASTER_Transmit>:
}

void MASTER_Transmit(uint8_t data){
	SPDR = data;
 436:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,SPIF) != 1);
 438:	77 9b       	sbis	0x0e, 7	; 14
 43a:	fe cf       	rjmp	.-4      	; 0x438 <MASTER_Transmit+0x2>
}
 43c:	08 95       	ret

0000043e <UART_Init>:
}
void UART_Transmit(uint8_t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
 43e:	88 e1       	ldi	r24, 0x18	; 24
 440:	8a b9       	out	0x0a, r24	; 10
 442:	86 e8       	ldi	r24, 0x86	; 134
 444:	80 bd       	out	0x20, r24	; 32
 446:	87 e6       	ldi	r24, 0x67	; 103
 448:	89 b9       	out	0x09, r24	; 9
 44a:	10 bc       	out	0x20, r1	; 32
 44c:	08 95       	ret

0000044e <UART_Receive>:
uint8_t UART_Receive(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);
 44e:	5f 9b       	sbis	0x0b, 7	; 11
 450:	fe cf       	rjmp	.-4      	; 0x44e <UART_Receive>
	return UDR;
 452:	8c b1       	in	r24, 0x0c	; 12
}
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
