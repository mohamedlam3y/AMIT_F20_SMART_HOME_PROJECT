
PROJECT_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000181b  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c4  00000000  00000000  0000201b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd2  00000000  00000000  000029df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000035b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000605  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c0  00000000  00000000  00003e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00004709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 20 02 	call	0x440	; 0x440 <main>
  64:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
			break;
  9c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
			break;
  b4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
			break;
  cc:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
			break;
  e4:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
			break;
 10a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
			break;
 120:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
			break;
 136:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 14e:	44 23       	and	r20, r20
 150:	19 f0       	breq	.+6      	; 0x158 <DIO_SetPin_State+0xa>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	c9 f1       	breq	.+114    	; 0x1c8 <DIO_SetPin_State+0x7a>
 156:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_SetPin_State+0x32>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPin_State+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_SetPin_State+0x4a>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_SetPin_State+0x62>
 166:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPin_State+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPin_State+0x22>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8b bb       	out	0x1b, r24	; 27
			break;
 17e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 180:	28 b3       	in	r18, 0x18	; 24
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPin_State+0x3e>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPin_State+0x3a>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	88 bb       	out	0x18, r24	; 24
			break;
 196:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 198:	25 b3       	in	r18, 0x15	; 21
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPin_State+0x56>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPin_State+0x52>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
			break;
 1ae:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPin_State+0x6e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPin_State+0x6a>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
			break;
 1c6:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	89 f0       	breq	.+34     	; 0x1ee <DIO_SetPin_State+0xa0>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <DIO_SetPin_State+0x8a>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	c9 f0       	breq	.+50     	; 0x204 <DIO_SetPin_State+0xb6>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	11 f1       	breq	.+68     	; 0x21a <DIO_SetPin_State+0xcc>
 1d6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPin_State+0x96>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPin_State+0x92>
 1e8:	82 2b       	or	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
			break;
 1ec:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_State+0xac>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_State+0xa8>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
			break;
 202:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 204:	25 b3       	in	r18, 0x15	; 21
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_State+0xc2>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_State+0xbe>
 214:	82 2b       	or	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
			break;
 218:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 21a:	22 b3       	in	r18, 0x12	; 18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_State+0xd8>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_State+0xd4>
 22a:	82 2b       	or	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <DIO_TglPin_State>:
		break;
	}
}
void DIO_TglPin_State(DIO_Port port, DIO_Pin pin)
{
	switch(port)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	89 f0       	breq	.+34     	; 0x256 <DIO_TglPin_State+0x26>
 234:	28 f0       	brcs	.+10     	; 0x240 <DIO_TglPin_State+0x10>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	c9 f0       	breq	.+50     	; 0x26c <DIO_TglPin_State+0x3c>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	11 f1       	breq	.+68     	; 0x282 <DIO_TglPin_State+0x52>
 23e:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 240:	2b b3       	in	r18, 0x1b	; 27
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_TglPin_State+0x1c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_TglPin_State+0x18>
 250:	82 27       	eor	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
		break;
 254:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_TglPin_State+0x32>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_TglPin_State+0x2e>
 266:	82 27       	eor	r24, r18
 268:	88 bb       	out	0x18, r24	; 24
		break;
 26a:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_TglPin_State+0x48>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_TglPin_State+0x44>
 27c:	82 27       	eor	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
		break;
 280:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_TglPin_State+0x5e>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_TglPin_State+0x5a>
 292:	82 27       	eor	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret

00000298 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2ba:	8b b3       	in	r24, 0x1b	; 27
 2bc:	9c 2f       	mov	r25, r28
 2be:	90 7f       	andi	r25, 0xF0	; 240
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	89 2b       	or	r24, r25
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_WRITE_CMD+0x3c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_WRITE_CMD+0x42>
 2da:	00 00       	nop
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 2e6:	20 e1       	ldi	r18, 0x10	; 16
 2e8:	c2 9f       	mul	r28, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	9b b3       	in	r25, 0x1b	; 27
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	89 2b       	or	r24, r25
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	63 e0       	ldi	r22, 0x03	; 3
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_WRITE_CMD+0x6c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_WRITE_CMD+0x72>
 30a:	00 00       	nop
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 316:	8f e3       	ldi	r24, 0x3F	; 63
 318:	9f e1       	ldi	r25, 0x1F	; 31
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_WRITE_CMD+0x82>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_WRITE_CMD+0x88>
 320:	00 00       	nop
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCD_Init>:
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	65 e0       	ldi	r22, 0x05	; 5
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	66 e0       	ldi	r22, 0x06	; 6
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	67 e0       	ldi	r22, 0x07	; 7
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	81 ee       	ldi	r24, 0xE1	; 225
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <LCD_Init+0x4c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Init+0x56>
 37c:	00 00       	nop
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 384:	83 e3       	ldi	r24, 0x33	; 51
 386:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 38a:	82 e3       	ldi	r24, 0x32	; 50
 38c:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 3a8:	08 95       	ret

000003aa <LCD_WRITE_DTA>:
 3aa:	cf 93       	push	r28
 3ac:	c8 2f       	mov	r28, r24
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3cc:	8b b3       	in	r24, 0x1b	; 27
 3ce:	9c 2f       	mov	r25, r28
 3d0:	90 7f       	andi	r25, 0xF0	; 240
 3d2:	8f 70       	andi	r24, 0x0F	; 15
 3d4:	89 2b       	or	r24, r25
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	63 e0       	ldi	r22, 0x03	; 3
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_WRITE_DTA+0x3c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_WRITE_DTA+0x42>
 3ec:	00 00       	nop
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 3f8:	20 e1       	ldi	r18, 0x10	; 16
 3fa:	c2 9f       	mul	r28, r18
 3fc:	c0 01       	movw	r24, r0
 3fe:	11 24       	eor	r1, r1
 400:	9b b3       	in	r25, 0x1b	; 27
 402:	9f 70       	andi	r25, 0x0F	; 15
 404:	89 2b       	or	r24, r25
 406:	8b bb       	out	0x1b, r24	; 27
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 412:	8f e9       	ldi	r24, 0x9F	; 159
 414:	9f e0       	ldi	r25, 0x0F	; 15
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 428:	8f e3       	ldi	r24, 0x3F	; 63
 42a:	9f e1       	ldi	r25, 0x1F	; 31
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WRITE_CMD>
 43e:	08 95       	ret

00000440 <main>:

int main(void)
{
	uint8_t data = 0 ;
	
	SPI_SLAVE_Initialize();
 440:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_SLAVE_Initialize>
	
	LED0_Initialize();
 444:	0e 94 87 02 	call	0x50e	; 0x50e <LED0_Initialize>
	LED1_Initialize();
 448:	0e 94 9e 02 	call	0x53c	; 0x53c <LED1_Initialize>
	LED2_Initialize();
 44c:	0e 94 b5 02 	call	0x56a	; 0x56a <LED2_Initialize>
	
	LCD_Init();
 450:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Init>
	LCD_CLEAR();
 454:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_CLEAR>
	
	while (1)
	{

		data = SLAVE_Receive();
 458:	0e 94 de 02 	call	0x5bc	; 0x5bc <SLAVE_Receive>
 45c:	c8 2f       	mov	r28, r24
	    LCD_WRITE_DTA(data);
 45e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_WRITE_DTA>
			
		//if(data == 0x31)
		if(data == 'a')
 462:	c1 36       	cpi	r28, 0x61	; 97
 464:	81 f4       	brne	.+32     	; 0x486 <main+0x46>
		{
			LED0_ON();
 466:	0e 94 8d 02 	call	0x51a	; 0x51a <LED0_ON>
			LED1_OFF();
 46a:	0e 94 aa 02 	call	0x554	; 0x554 <LED1_OFF>
			LED2_OFF();
 46e:	0e 94 c1 02 	call	0x582	; 0x582 <LED2_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	2f e7       	ldi	r18, 0x7F	; 127
 474:	8a e1       	ldi	r24, 0x1A	; 26
 476:	96 e0       	ldi	r25, 0x06	; 6
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <main+0x38>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x42>
 482:	00 00       	nop
 484:	e9 cf       	rjmp	.-46     	; 0x458 <main+0x18>
			_delay_ms(125);
			data = 0 ;
		}
		/*else if (data == 0x32)*/
		else if (data == 'b')
 486:	c2 36       	cpi	r28, 0x62	; 98
 488:	81 f4       	brne	.+32     	; 0x4aa <main+0x6a>
		{
			LED0_OFF();
 48a:	0e 94 93 02 	call	0x526	; 0x526 <LED0_OFF>
			LED1_ON();
 48e:	0e 94 a4 02 	call	0x548	; 0x548 <LED1_ON>
			LED2_OFF();
 492:	0e 94 c1 02 	call	0x582	; 0x582 <LED2_OFF>
 496:	2f e7       	ldi	r18, 0x7F	; 127
 498:	8a e1       	ldi	r24, 0x1A	; 26
 49a:	96 e0       	ldi	r25, 0x06	; 6
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x5c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x66>
 4a6:	00 00       	nop
 4a8:	d7 cf       	rjmp	.-82     	; 0x458 <main+0x18>
			_delay_ms(125);
			data = 0 ;
		}
		/*else if (data == 0x33)*/
		else if(data == 'c')
 4aa:	c3 36       	cpi	r28, 0x63	; 99
 4ac:	81 f4       	brne	.+32     	; 0x4ce <main+0x8e>
		{
			LED0_OFF();
 4ae:	0e 94 93 02 	call	0x526	; 0x526 <LED0_OFF>
			LED1_OFF();
 4b2:	0e 94 aa 02 	call	0x554	; 0x554 <LED1_OFF>
			LED2_ON();
 4b6:	0e 94 bb 02 	call	0x576	; 0x576 <LED2_ON>
 4ba:	2f e7       	ldi	r18, 0x7F	; 127
 4bc:	8a e1       	ldi	r24, 0x1A	; 26
 4be:	96 e0       	ldi	r25, 0x06	; 6
 4c0:	21 50       	subi	r18, 0x01	; 1
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <main+0x80>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0x8a>
 4ca:	00 00       	nop
 4cc:	c5 cf       	rjmp	.-118    	; 0x458 <main+0x18>
			_delay_ms(125);
			data = 0 ;
		}
		else{
			uint8_t c = 0;
			LED0_OFF();
 4ce:	0e 94 93 02 	call	0x526	; 0x526 <LED0_OFF>
			LED1_OFF();
 4d2:	0e 94 aa 02 	call	0x554	; 0x554 <LED1_OFF>
			LED2_OFF();
 4d6:	0e 94 c1 02 	call	0x582	; 0x582 <LED2_OFF>
			LED2_ON();
			_delay_ms(125);
			data = 0 ;
		}
		else{
			uint8_t c = 0;
 4da:	c0 e0       	ldi	r28, 0x00	; 0
			LED1_OFF();
			LED2_OFF();
			
			do 
			{
				LED0_Toggle();
 4dc:	0e 94 99 02 	call	0x532	; 0x532 <LED0_Toggle>
				LED1_Toggle();
 4e0:	0e 94 b0 02 	call	0x560	; 0x560 <LED1_Toggle>
				LED2_Toggle();
 4e4:	0e 94 c7 02 	call	0x58e	; 0x58e <LED2_Toggle>
 4e8:	2f e7       	ldi	r18, 0x7F	; 127
 4ea:	8a e1       	ldi	r24, 0x1A	; 26
 4ec:	96 e0       	ldi	r25, 0x06	; 6
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0xae>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0xb8>
 4f8:	00 00       	nop
				_delay_ms(125);
				c++;
 4fa:	cf 5f       	subi	r28, 0xFF	; 255
			} while (c != 10);
 4fc:	ca 30       	cpi	r28, 0x0A	; 10
 4fe:	71 f7       	brne	.-36     	; 0x4dc <main+0x9c>
			
			LED0_ON();
 500:	0e 94 8d 02 	call	0x51a	; 0x51a <LED0_ON>
			LED1_ON();
 504:	0e 94 a4 02 	call	0x548	; 0x548 <LED1_ON>
			LED2_ON();
 508:	0e 94 bb 02 	call	0x576	; 0x576 <LED2_ON>
 50c:	a5 cf       	rjmp	.-182    	; 0x458 <main+0x18>

0000050e <LED0_Initialize>:

#include "OUTPUT_MODULE.h"

void LED0_Initialize(void)
{
	DIO_SetPin_Direction(LED0_DDR, LED0, LED_OUTPUT);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 518:	08 95       	ret

0000051a <LED0_ON>:
}
void LED0_ON(void)
{
	DIO_SetPin_State(LED0_PRT, LED0, LED_HIGH);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 524:	08 95       	ret

00000526 <LED0_OFF>:
}
void LED0_OFF(void)
{
	DIO_SetPin_State(LED0_PRT, LED0, LED_LOW);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 530:	08 95       	ret

00000532 <LED0_Toggle>:
}
void LED0_Toggle(void)
{
	DIO_TglPin_State(LED0_PRT, LED0);
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 18 01 	call	0x230	; 0x230 <DIO_TglPin_State>
 53a:	08 95       	ret

0000053c <LED1_Initialize>:
}


void LED1_Initialize(void)
{
	DIO_SetPin_Direction(LED1_DDR,LED1,LED_OUTPUT);
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	67 e0       	ldi	r22, 0x07	; 7
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 546:	08 95       	ret

00000548 <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPin_State(LED1_PRT, LED1, LED_HIGH);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	67 e0       	ldi	r22, 0x07	; 7
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 552:	08 95       	ret

00000554 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPin_State(LED1_PRT, LED1, LED_LOW);
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	67 e0       	ldi	r22, 0x07	; 7
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 55e:	08 95       	ret

00000560 <LED1_Toggle>:
}
void LED1_Toggle(void)
{
	DIO_TglPin_State(LED1_PRT, LED1);
 560:	67 e0       	ldi	r22, 0x07	; 7
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 18 01 	call	0x230	; 0x230 <DIO_TglPin_State>
 568:	08 95       	ret

0000056a <LED2_Initialize>:



void LED2_Initialize(void)
{
	DIO_SetPin_Direction(LED2_DDR, LED2, LED_OUTPUT);
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	63 e0       	ldi	r22, 0x03	; 3
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 574:	08 95       	ret

00000576 <LED2_ON>:
}
void LED2_ON(void)
{
	DIO_SetPin_State(LED2_PRT, LED2, LED_HIGH);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	63 e0       	ldi	r22, 0x03	; 3
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 580:	08 95       	ret

00000582 <LED2_OFF>:
}
void LED2_OFF(void)
{
	DIO_SetPin_State(LED2_PRT, LED2, LED_LOW);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	63 e0       	ldi	r22, 0x03	; 3
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_State>
 58c:	08 95       	ret

0000058e <LED2_Toggle>:
}
void LED2_Toggle(void)
{
	DIO_TglPin_State(LED2_PRT, LED2);
 58e:	63 e0       	ldi	r22, 0x03	; 3
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	0e 94 18 01 	call	0x230	; 0x230 <DIO_TglPin_State>
 596:	08 95       	ret

00000598 <SPI_SLAVE_Initialize>:
	SPDR = data;
	while(GET_BIT(SPSR,SPIF) != 1);
}

void SPI_SLAVE_Initialize(void){
	CLR_BIT(SPSR,SPI12X); //SPEED SELECTOR : Fosc/128
 598:	8e b1       	in	r24, 0x0e	; 14
 59a:	8e 7f       	andi	r24, 0xFE	; 254
 59c:	8e b9       	out	0x0e, r24	; 14
	CLR_BIT(DDRB,SS);   /*Define direction as input*/
 59e:	87 b3       	in	r24, 0x17	; 23
 5a0:	8f 7e       	andi	r24, 0xEF	; 239
 5a2:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB,MOSI);	/*Define direction as output*/
 5a4:	87 b3       	in	r24, 0x17	; 23
 5a6:	8f 7d       	andi	r24, 0xDF	; 223
 5a8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,MISO);	/*Define direction as input*/
 5aa:	87 b3       	in	r24, 0x17	; 23
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB,SCK);	/*Define direction as input*/
 5b0:	87 b3       	in	r24, 0x17	; 23
 5b2:	8f 77       	andi	r24, 0x7F	; 127
 5b4:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x43;//0b 0100 0011
 5b6:	83 e4       	ldi	r24, 0x43	; 67
 5b8:	8d b9       	out	0x0d, r24	; 13
 5ba:	08 95       	ret

000005bc <SLAVE_Receive>:
}

uint8_t SLAVE_Receive(void){
	while( GET_BIT(SPSR,SPIF) != 1);
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <SLAVE_Receive>
	return SPDR;
 5c0:	8f b1       	in	r24, 0x0f	; 15
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
